precision mediump float;

uniform mat4 u_worldMatrix;
uniform mat4 u_viewMatrix;
uniform mat4 u_projMatrix;

uniform vec3 u_lightPosition;
uniform vec3 u_cameraPosition;

attribute vec3 position;
attribute vec3 normal;
attribute vec3 tangent;
attribute vec3 bitangent;
attribute vec2 texCoord;

varying vec3 v_surfaceToLight;
varying vec3 v_surfaceToCamera;
varying vec2 v_texCoord;
varying vec3 v_normal;

mat3 transpose(mat3 m) {
  return mat3(m[0][0], m[1][0], m[2][0],
              m[0][1], m[1][1], m[2][1],
              m[0][2], m[1][2], m[2][2]);
}

void main() {
    mat4 vwm = u_viewMatrix * u_worldMatrix;
    mat3 vwm3 = mat3(vwm);

    vec3 normalCamera = vwm3 * normal;
    vec3 tangentCamera = vwm3 * tangent;
    vec3 bitantentCamera = vwm3 * bitangent;
    mat3 tbn = transpose(mat3(tangentCamera, bitantentCamera, normalCamera));

    vec4 pos = vwm * vec4(position, 1.0);
    gl_Position = u_projMatrix * pos;
    v_surfaceToLight = tbn * (u_lightPosition - pos.xyz);
    v_surfaceToCamera = tbn * (u_cameraPosition - pos.xyz);
    v_texCoord = texCoord;
}
